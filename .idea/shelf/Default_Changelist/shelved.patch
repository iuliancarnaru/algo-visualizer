Index: src/doubly_linked_list.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class Node {\r\n  constructor(val) {\r\n    this.val = val;\r\n    this.next = null;\r\n    this.prev = null;\r\n  }\r\n}\r\n\r\nclass DoublyLinkedList {\r\n  constructor() {\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.length = 0;\r\n  }\r\n\r\n  push(val) {\r\n    let newNode = new Node(val);\r\n    if (!this.head) {\r\n      this.head = newNode;\r\n      this.tail = newNode;\r\n    } else {\r\n      this.tail.next = newNode;\r\n      newNode.prev = this.tail;\r\n      this.tail = newNode;\r\n    }\r\n    this.length++;\r\n    return this;\r\n  }\r\n\r\n  pop() {\r\n    if (!this.head) return undefined;\r\n    let poppedNode = this.tail;\r\n    if (this.length === 1) {\r\n      this.head = null;\r\n      this.tail = null;\r\n    } else {\r\n      this.tail = poppedNode.prev;\r\n      this.tail.next = null;\r\n      poppedNode.prev = null;\r\n    }\r\n    this.length--;\r\n    return poppedNode;\r\n  }\r\n\r\n  shift() {\r\n    if (!this.head) return undefined;\r\n    let oldHead = this.head;\r\n    if (this.length === 1) {\r\n      this.head = null;\r\n      this.tail = null;\r\n    } else {\r\n      this.head = oldHead.next;\r\n      this.head.prev = null;\r\n      oldHead.next = null;\r\n    }\r\n    this.length--;\r\n    return oldHead;\r\n  }\r\n\r\n  unshift(val) {\r\n    let newNode = new Node(val);\r\n    if (!this.head) {\r\n      this.head = newNode;\r\n      this.tail = newNode;\r\n    } else {\r\n      this.head.prev = newNode;\r\n      newNode.next = this.head;\r\n      this.head = newNode;\r\n    }\r\n    this.length++;\r\n    return this;\r\n  }\r\n\r\n  get(index) {\r\n    let current, count;\r\n\r\n    if (index < 0 || index >= this.length) return null;\r\n    if (index <= this.length / 2) {\r\n      count = 0;\r\n      current = this.head;\r\n      while (count !== index) {\r\n        current = current.next;\r\n        count++;\r\n      }\r\n    } else {\r\n      count = this.length - 1;\r\n      current = this.tail;\r\n      while (count !== index) {\r\n        current = current.prev;\r\n        count--;\r\n      }\r\n    }\r\n\r\n    return current;\r\n  }\r\n}\r\n\r\nlet list = new DoublyLinkedList();\r\nlist.pop();\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/doubly_linked_list.js	(revision f31161a5b826364f60b8497824e6ea051f6e3631)
+++ src/doubly_linked_list.js	(date 1583959256463)
@@ -93,6 +93,15 @@
 
     return current;
   }
+
+  set(index, val) {
+    let foundNode = this.get(index);
+    if (foundNode !== null) {
+      foundNode.val = val;
+      return true;
+    }
+    return false;
+  }
 }
 
 let list = new DoublyLinkedList();
